@startuml
actor Giocatore
participant "InterfacciaUtente" as UI
participant "PartitaController" as PC
participant "Partita" as P
participant "GiocatoreFactory" as GF
participant "Giocatore" as G
participant "Tabellone" as T

Giocatore -> UI: avviaNuovaPartita()
UI -> PC: avviaNuovaPartita()
PC --> UI: richiediNumeroGiocatori()
UI --> Giocatore: mostraFormNumeroGiocatori()
Giocatore -> UI: inserisciNumeroGiocatori(n)
UI -> PC: inserisciNumeroGiocatori(n)

loop per ogni giocatore i da 1 a n
    PC --> UI: richiediTipoGiocatore(i)
    UI --> Giocatore: mostraOpzioniTipoGiocatore(i)
    Giocatore -> UI: selezionaTipoGiocatore(tipo)
    UI -> PC: selezionaTipoGiocatore(tipo)
    
    alt tipo == umano
        PC --> UI: richiediNomeGiocatore(i)
        UI --> Giocatore: mostraFormNomeGiocatore(i)
        Giocatore -> UI: inserisciNomeGiocatore(nome)
        UI -> PC: inserisciNomeGiocatore(nome)
        
        PC --> UI: richiediColorePedina(i)
        UI --> Giocatore: mostraOpzioniColori(coloriDisponibili)
        Giocatore -> UI: selezionaColorePedina(colore)
        UI -> PC: selezionaColorePedina(colore)
        PC -> PC: verificaColoreUnico(colore)
    else tipo == computer
        PC -> PC: assegnaNomeCPU()
        PC -> PC: selezionaColorePedinaCPU()
    end
end

Giocatore -> UI: confermaImpostazioni()
UI -> PC: confermaImpostazioni()
PC -> P: <<create>>
PC -> GF: creaGiocatori(impostazioniGiocatori)

loop per ogni giocatore nelle impostazioni
    GF -> G: <<create>>(nome, tipo, colore)
    GF -> P: aggiungiGiocatore(giocatore)
end

PC -> T: <<create>>
PC -> P: setTabellone(tabellone)
PC -> P: determinaOrdineGiocatori()
PC -> P: inizializzaPosizioni()
PC -> UI: visualizzaTabellone(partita)
UI --> Giocatore: mostraTabelloneEGiocatori(partita)
@enduml



@startuml
participant "PartitaController" as PC
participant "Partita" as P
participant "Random" as R

PC -> P: determinaOrdineGiocatori()
P -> P: getGiocatori(): List<Giocatore>
P -> R: <<create>>
P -> R: shuffle(giocatori)
P -> P: setOrdineGiocatori(giocatoriMischiati)
P -> P: setGiocatoreCorrente(giocatoriMischiati[0])
P --> PC: ordineGiocatori
@enduml




@startuml
participant "PartitaController" as PC
participant "ImpostazioniPartita" as IP

PC -> PC: verificaColoreUnico(colore)
PC -> IP: getColoriSelezionati(): List<Colore>
alt coloriSelezionati.contains(colore)
    PC --> PC: false
else 
    PC -> IP: aggiungiColoreSelezionato(colore)
    PC --> PC: true
end
@enduml


@startuml
participant "PartitaController" as PC
participant "Partita" as P
participant "Tabellone" as T
participant "Casella" as C
participant "Pedina" as PD
participant "Giocatore" as G

PC -> P: inizializzaPartita()
P -> T: inizializzaTabellone()

loop per ogni casella da 1 a 63
    T -> C: <<create>>(numero)
    alt casella speciale
        T -> C: setSpeciale(true)
        T -> C: setEffetto(tipoEffetto)
    end
    T -> T: aggiungiCasella(casella)
end

P -> P: getGiocatori(): List<Giocatore>
loop per ogni giocatore
    G -> PD: <<create>>(colore)
    G -> PD: setPosizione(0)  // Posizione iniziale: casella di partenza
    G -> G: setPedina(pedina)
end

P -> P: determinaOrdineGiocatori()
P --> PC: partitaInizializzata
@enduml



@startuml
participant "PartitaController" as PC
participant "ImpostazioniPartita" as IP
participant "GiocatoreFactory" as GF

PC -> PC: selezionaTipoGiocatore("computer")
PC -> PC: assegnaNomeCPU()
PC -> IP: getNumeroGiocatoriCPU(): int
PC -> IP: increaseNumeroGiocatoriCPU()
PC -> PC: nomeCPU = "CPU " + numeroGiocatoriCPU
PC -> PC: selezionaColorePedinaCPU()
PC -> IP: getColoriDisponibili(): List<Colore>
PC -> PC: coloreRandom = scegliCasuale(coloriDisponibili)
PC -> IP: rimuoviColoreDisponibile(coloreRandom)
PC -> IP: setTipoGiocatore(indiceGiocatore, "computer")
PC -> IP: setNomeGiocatore(indiceGiocatore, nomeCPU)
PC -> IP: setColoreGiocatore(indiceGiocatore, coloreRandom)
@enduml